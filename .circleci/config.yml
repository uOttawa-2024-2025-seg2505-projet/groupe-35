version: 2.1

executors:
  android:
    docker:
      - image: circleci/android:api-30  # Image Android CircleCI
    environment:
      JVM_OPTS: -Xmx3200m
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk
      PATH: "/usr/lib/jvm/java-17-openjdk/bin:$PATH"
    working_directory: ~/project

jobs:
  setup-environment:
    executor: android
    steps:
      # Étape 1 : Ajouter GitHub à known_hosts
      - run:
          name: Add GitHub to known_hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts

      # Étape 2 : Tester la connexion SSH à GitHub
      - run:
          name: Test SSH Connection
          command: ssh -T git@github.com

      # Étape 3 : Cloner le dépôt via SSH
      - checkout

  build-and-test:
    executor: android
    steps:
      # Étape 4 : Cloner le dépôt
      - checkout

      # Étape 5 : Restaurer le cache Gradle
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

      # Étape 6 : Configurer les permissions Gradle
      - run:
          name: Set Gradle Permissions
          command: chmod +x ./gradlew

      # Étape 7 : Installer les dépendances
      - run:
          name: Install Dependencies
          command: ./gradlew dependencies

      # Étape 8 : Sauvegarder le cache Gradle
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

      # Étape 9 : Exécuter les tests unitaires
      - run:
          name: Run Unit Tests
          command: ./gradlew testDebugUnitTest

      # Étape 10 : Exécuter l'analyse statique (Lint)
      - run:
          name: Run Lint
          command: ./gradlew lint

      # Étape 11 : Stocker les artefacts (rapports de build)
      - store_artifacts:
          path: app/build/reports
          destination: reports

      # Étape 12 : Stocker les résultats des tests
      - store_test_results:
          path: app/build/test-results

workflows:
  version: 2
  build-and-test-workflow:
    jobs:
      - setup-environment
      - build-and-test:
          requires:
            - setup-environment
